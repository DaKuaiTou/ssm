<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 组件扫描 -->
    <context:component-scan base-package="com.dkt"></context:component-scan>

    <!-- 引入mybatis的相关bean -->
    <import resource="classpath:mybatis_config.xml"></import>

    <!-- IOC事务相关的对象 -->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!-- 事务的规则配置 -->
    <tx:advice id="tx1" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <!-- 给哪个方法添加事务规则 rollback-for的意思是遇到所有的Exception都要回滚 -->
            <tx:method name="transfer" rollback-for="java.lang.Exception"></tx:method>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!-- 配置切入点 -->
        <aop:pointcut id="pointcut1" expression="execution(public void com.dkt.service.impl.AccountServiceImpl.transfer(..))"/>
        <!-- 配置事务通知 -->
        <aop:advisor advice-ref="tx1" pointcut-ref="pointcut1"></aop:advisor>
    </aop:config>
</beans>